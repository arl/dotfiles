# Install in /etc/bash_completion.d/ or your personal directory

complete -f -X '!*.8' 8l
complete -f -X '!*.6' 6l
complete -f -X '!*.5' 5l
complete -f -X '!*.go' 8g 6g 5g gofmt gccgo

_go_importpath() {
  echo "$(compgen -W "$(go list all) all std" -- "$1")"
}

_go_test_functions() {
  find . -not -path "./vendor" -type f -name "*_test.go" -exec cat {} \; | grep -oP '^func (\w+)\(\w \*testing\.T\) {$' | grep -oP ' \w+' | grep -oP '\w+';
}

_go_bench_functions() {
  find . -not -path "./vendor" -type f -name "*_test.go" -exec cat {} \; | grep -oP '^func (\w+)\(\w \*testing\.B\) {$' | grep -oP ' \w+' | grep -oP '\w+';
}

_go() {
  local cur prev cmd
  cur=$(_get_cword)
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  cmd="${COMP_WORDS[1]}"

  local cmds="build clean doc env fix fmt generate get install list mod run test tool version vet"
  local flags

  if [[ "$COMP_CWORD" == 1 ]]; then
    COMPREPLY=($(compgen -W "$cmds help" -- "$cur"))
    return
  fi

  case "$cmd" in
    'build'|'install')
      flags="-o -a -n -p -v -x"
      ;;
    'run')
      # Filesystem-based completion for 'go run'
      COMPREPLY=($(compgen -f -- "$cur"))
      return
      ;;
    'clean')
      flags="-i -r -n -x"
      ;;
    'list')
      flags="-e -f -json"
      ;;
    'mod')
      if [[ "$COMP_CWORD" == 2 ]]; then
        COMPREPLY=($(compgen -W "download edit graph init tidy vendor verify why" -- "$cur"))
        return
      fi
      ;;
    'test')
      case "$prev" in
        '-run')
          COMPREPLY=($(compgen -W "$(_go_test_functions)" -- "$cur"))
          return
          ;;
        '-bench')
          COMPREPLY=($(compgen -W "$(_go_bench_functions)" -- "$cur"))
          return
          ;;
      esac
      flags="-c -file -i -p -x -run -bench"
      ;;
    'vet')
      flags="-all -asmdecl -assign -atomic -bool -buildtag -cgocall -composites"
      ;;
  esac

  if [[ "$cur" == -* ]]; then
    COMPREPLY=($(compgen -W "$flags" -- "$cur"))
  else
    COMPREPLY=($(_go_importpath "$cur"))
  fi
}

complete -F _go go
