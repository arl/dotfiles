# function definitions for fzf (fuzzy file finder)
# most are taken from https://github.com/junegunn/fzf/wiki/Examples

# vim/gvim
# ========

# fag [EDITOR] [EXTENSION] - Open selected file, fuzzy-finding by content.
#    - EDTIOR is vim by default
#    - EXTENSION (empty by default), if set only filename matching
#      *.EXTENSION pattern are presented
fag() {
  local line editor match_ext
  editor=${1:-vim}
  match_ext=${2:-}
  # forge file matching option only if an extension has been provided
  [[ -n $match_ext ]] && match_ext="-G \.$match_ext\$"
  if line=$(ag --nobreak --nonumbers --noheading $match_ext . | fzf +m);
  then
    $editor $(echo $line | cut -d: -f 1)
  else
    echo cancelled...
  fi
}

# fv [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fv() {
  local files
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# like fv, for gvim
fgv() {
  local files
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && gvim "${files[@]}"
}


# Bash
# ====

# fd - cd to selected directory
fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}


# Git
# ===

# fco - checkout git branch (including remote branches)
fco() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# fshow - git commit browser
fshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}


# Processes
# =========

# fkill - kill process
fkill() {
  local pid
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    echo $pid | xargs kill -${1:-9}
  fi
}

# vim: filetype=sh
